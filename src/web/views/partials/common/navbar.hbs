<navbar>
    <nav class="navbar navbar-light block-navbar">
        <div class="container">
            <div class="block-navbar-username"><span class="block-navbar-username--logout"> <a class="logout ml-2" href="#">Hi, <span>Oriol</span></a></span></div>
            <div class="block-navbar-message-icon">
                <button id="chatToggle" class="btn btn-link chat-icon-btn" title="Open Chat">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M20 2H4C2.9 2 2.01 2.9 2.01 4L2 22L6 18H20C21.1 18 22 17.1 22 16V4C22 2.9 21.1 2 20 2ZM18 14H6V12H18V14ZM18 11H6V9H18V11ZM18 8H6V6H18V8Z" fill="#28aae1"/>
                    </svg>
                </button>
            </div>
            <div class="row flex-grow-1">
                <div class="col-12 col-md-5 col-lg-5 block-navbar-left">
                    <a class="navbar-brand" href="/">
                        <img class="block-navbar-left-logo" src="/assets/logo_contoso_air.svg">
                    </a>
                </div>
                <div class="col-12 col-md-7 col-lg-7 block-navbar-right">
                    <ul class="navbar-nav block-navbar-right-menu">
                        {{#each publicMenu}}
                            <li class="nav-item block-navbar-right-menu-item {{#if active}}active{{/if}}">
                                <a class="nav-link" href="{{url}}">{{text}}</a>
                            </li>
                        {{/each}}
                        {{#if greeting}}
                            {{#each securedMenu}}
                                <li class="nav-item block-navbar-right-menu-item {{#if active}}active{{/if}}">
                                    <a class="nav-link" href="{{url}}">{{text}}</a>
                                </li>
                            {{/each}}
                            <li class="nav-item  block-navbar-right-menu-item block-navbar-right-menu-item__logout">
                                <a class="nav-link" href="/logout">{{{greeting}}}</a>
                            </li>
                        {{else}}
                            {{#each onlyPublicMenu}}
                                <li class="nav-item block-navbar-right-menu-item {{#if active}}active{{/if}}">
                                    <a class="nav-link" href="{{url}}">{{text}}</a>
                                </li>
                            {{/each}}
                        {{/if}}
                    </ul>
                </div>
            </div>

        </div>
    </nav>
    
    <!-- Chat Side Pane -->
    <div id="chatPane" class="chat-pane">
        <div class="chat-header">
            <h5>AI Assistant</h5>
            <button id="closeChatPane" class="btn btn-link close-chat-btn">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z" fill="#666"/>
                </svg>
            </button>
        </div>
        <div class="chat-messages">
            <div class="chat-message ai-message">
                <div class="message-content">
                    <strong>AI Assistant:</strong> Hello! I'm here to help you with your travel plans. How can I assist you today?
                </div>
                <div class="message-time">2:30 PM</div>
            </div>
            <div class="chat-message user-message">
                <div class="message-content">
                    Hi! I'm looking for flights to Barcelona next month.
                </div>
                <div class="message-time">2:32 PM</div>
            </div>
            <div class="chat-message ai-message">
                <div class="message-content">
                    <strong>AI Assistant:</strong> Great choice! Barcelona is a wonderful destination. I can help you find the best flights. What's your departure city and preferred travel dates?
                </div>
                <div class="message-time">2:33 PM</div>
            </div>
            <div class="chat-message user-message">
                <div class="message-content">
                    Flying from New York, looking at dates around March 15th.
                </div>
                <div class="message-time">2:35 PM</div>
            </div>
            <div class="chat-message ai-message">
                <div class="message-content">
                    <strong>AI Assistant:</strong> Perfect! Let me search for flights from New York to Barcelona around March 15th. I'll look for the best deals and options for you.
                </div>
                <div class="message-time">2:36 PM</div>
            </div>
        </div>
        <div class="chat-input-container">
            <input type="text" id="chatInput" class="form-control" placeholder="Type your message...">
            <button id="sendMessage" class="btn btn-primary send-btn">Send</button>
        </div>
    </div>
    
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        var chatToggle = document.getElementById('chatToggle');
        var closeChatPane = document.getElementById('closeChatPane');
        var chatPane = document.getElementById('chatPane');
        var sendMessage = document.getElementById('sendMessage');
        var chatInput = document.getElementById('chatInput');
        var chatMessages = document.querySelector('.chat-messages');
        
        // Toggle chat pane
        chatToggle.addEventListener('click', function() {
            chatPane.classList.add('open');
        });
        
        // Close chat pane
        closeChatPane.addEventListener('click', function() {
            chatPane.classList.remove('open');
        });
        
        // Close chat pane when clicking outside
        document.addEventListener('click', function(event) {
            var isClickInsideChat = chatPane.contains(event.target);
            var isClickOnToggle = chatToggle.contains(event.target);
            
            if (!isClickInsideChat && !isClickOnToggle && chatPane.classList.contains('open')) {
                chatPane.classList.remove('open');
            }
        });
        
        // Chat session management
        var chatSessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        
        // Show loading indicator
        function showLoadingMessage() {
            var loadingMessage = document.createElement('div');
            loadingMessage.className = 'chat-message ai-message loading-message';
            loadingMessage.innerHTML = `
                <div class="message-content">
                    <strong>AI Assistant:</strong> <span class="typing-indicator">Typing...</span>
                </div>
            `;
            chatMessages.appendChild(loadingMessage);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            return loadingMessage;
        }
        
        // Remove loading indicator
        function removeLoadingMessage() {
            var loadingMessage = chatMessages.querySelector('.loading-message');
            if (loadingMessage) {
                loadingMessage.remove();
            }
        }
        
        // Add message to chat UI
        function addMessageToUI(content, isUser = false) {
            var messageElement = document.createElement('div');
            messageElement.className = `chat-message ${isUser ? 'user-message' : 'ai-message'}`;
            messageElement.innerHTML = `
                <div class="message-content">
                    ${isUser ? content : '<strong>AI Assistant:</strong> ' + content}
                </div>
                <div class="message-time">${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</div>
            `;
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            return messageElement;
        }
        
        // Send message to chat API
        async function sendToChatAPI(message) {
            try {
                const response = await fetch('/api/chat/message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        message: message,
                        sessionId: chatSessionId,
                        context: 'travel',
                        userInfo: {
                            name: 'Oriol' // Could be dynamic based on logged in user
                        }
                    })
                });
                
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || 'Failed to get response from chat service');
                }
                
                return data;
            } catch (error) {
                console.error('Chat API Error:', error);
                throw error;
            }
        }
        
        // Send message functionality
        async function sendChatMessage() {
            var message = chatInput.value.trim();
            if (message) {
                // Disable input while processing
                chatInput.disabled = true;
                sendMessage.disabled = true;
                
                // Add user message to UI
                addMessageToUI(message, true);
                
                // Clear input
                chatInput.value = '';
                
                // Show loading indicator
                var loadingElement = showLoadingMessage();
                
                try {
                    // Send to chat API
                    var response = await sendToChatAPI(message);
                    
                    // Remove loading indicator
                    removeLoadingMessage();
                    
                    // Add AI response to UI
                    addMessageToUI(response.response);
                    
                } catch (error) {
                    // Remove loading indicator
                    removeLoadingMessage();
                    
                    // Show error message
                    addMessageToUI('Sorry, I\'m having trouble connecting right now. Please try again later.');
                    
                    console.error('Chat error:', error);
                } finally {
                    // Re-enable input
                    chatInput.disabled = false;
                    sendMessage.disabled = false;
                    chatInput.focus();
                }
            }
        }
        
        // Send message on button click
        sendMessage.addEventListener('click', sendChatMessage);
        
        // Send message on Enter key press
        chatInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                sendChatMessage();
            }
        });
    });
    </script>
</navbar>